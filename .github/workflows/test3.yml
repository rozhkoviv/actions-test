name: Test3
run-name:  ${{ inputs.test_name || github.event.client_payload.env }}

on:
  workflow_dispatch:
    inputs:
      test_name:
        type: string
        description: 'OKEOKE'
        required: false
        default: 'TESTNAME_1'
  repository_dispatch:
    types:
      - run_tests

env:
  TEST_TEST: ${{ github.event.inputs.test_name || github.event.client_payload.env }}

jobs:
  before-job:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout to target
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.sha }}
      - name: Choose dir name
        id: choose-dir-name
        run: |
          datetime=`date +%Y-%m-%d/%H-%M-%S`
          branch=`echo ${GITHUB_HEAD_REF:-$GITHUB_REF} | sed '1s|^refs/heads/||' | sed 's/^$/unknown/'`
          branch_sanitized=`echo $branch | tr ':#?/' '-'`
          upload_dir_name=$TEST_ENV/$branch_sanitized/$datetime/$GITHUB_SHA
          base_job_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          base_report_url=https://tests.onlineschool.cc/playwright-report/$upload_dir_name
          base_results_url=https://tests.onlineschool.cc/traces/$upload_dir_name
          echo "upload_dir_name=${upload_dir_name}" >> $GITHUB_OUTPUT
          echo "branch_name=${branch}" >> $GITHUB_OUTPUT
          echo "base_job_url=${base_job_url}" >> $GITHUB_OUTPUT
          echo "base_report_url=${base_report_url}" >> $GITHUB_OUTPUT
          echo "base_results_url=${base_results_url}" >> $GITHUB_OUTPUT
      - name: Get Others
        run: |
          echo "upload_dir_name -> ${{ steps.choose-dir-name.outputs.upload_dir_name }}"
          echo "branch_name -> ${{ steps.choose-dir-name.outputs.branch_name }}"
          echo "base_job_url -> ${{ steps.choose-dir-name.outputs.base_job_url }}"
          echo "base_report_url -> ${{ steps.choose-dir-name.outputs.base_report_url }}"
          echo "base_results_url -> ${{ steps.choose-dir-name.outputs.base_results_url }}"
    outputs:
      upload_dir_name: ${{ steps.choose-dir-name.outputs.upload_dir_name }}
      branch_name: ${{ steps.choose-dir-name.outputs.branch_name }}
      base_job_url: ${{ steps.choose-dir-name.outputs.base_job_url }}
      base_report_url: ${{ steps.choose-dir-name.outputs.base_report_url }}
      base_results_url: ${{ steps.choose-dir-name.outputs.base_results_url }}

  e2e_tests:
    runs-on: ubuntu-latest
    permissions: write-all
    strategy:
      matrix:
        shard: [1, 2, 3, 4, 5]
    steps:
    # - name: Get branch pull requests
    #   run: |
    #     curl -X POST https://api.github.com/graphql \
    #     -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
    #     -H "Content-Type: application/json" \
    #     -d '{"query":"{repository(owner:\"${{ github.repository_owner }}\",name:\"${{ github.event.repository.name }}\"){pullRequests(first: 1,headRefName:\"${{ github.ref_name}}\",states:[OPEN],orderBy:{field:CREATED_AT, direction:DESC}){nodes{number}}}}"}' > \
    #     pulls.json
    # - name: Parse pull requests
    #   id: pr-number-parse
    #   uses: actions/github-script@v6
    #   with:
    #     script: |
    #       const pulls = require('./pulls.json')
    #       const lastPull = pulls.data.repository.pullRequests.nodes.shift()
    #       if (lastPull) {
    #         core.setOutput('pr_number', String(lastPull.number))
    #       }
    - name: Checkout to target
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.client_payload.sha }}
    - name: Update check status
      run: |
        curl --request POST \
        --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.client_payload.sha }} \
        --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
        --header 'content-type: application/json' \
        --data '{
          "context": "e2e_tests",
          "state": "pending",
          "description": "e2e tests pending...",
          "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        }'
    - name: Test 3
      run: |
        echo "${{ inputs.test_name }}"
    - name: PRINT DEBUG
      env:
        DEBUG_QWE: ${{ github.sha }}
      run: |
        exit 1
    - id: store-failed-flag
      if: ${{ failure() }}
      run: |
        echo "failed=true" >> $GITHUB_OUTPUT
    - uses: cloudposse/github-action-matrix-outputs-write@main
      if: ${{ always() }}
      id: out
      with:
        matrix-step-name: ${{ github.job }}
        matrix-key: ${{ matrix.shard }}
        outputs: |-
          status: "${{ (steps.store-failed-flag.outputs.failed && 'failed') || 'success' }}"
  tests_stored_results:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [e2e_tests]
    steps:
      - uses: cloudposse/github-action-matrix-outputs-read@main
        id: stored-results
        with:
          matrix-step-name: e2e_tests
    outputs:
      result: "${{ steps.stored-results.outputs.result }}"

  update_commit_status_finish:
    needs: [tests_stored_results]
    permissions: write-all
    if: ${{ always() && github.event.client_payload.sha }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout tbuildo target
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.client_payload.sha }}
      - name: Summary status check
        id: summary-status-check
        run: |
          echo "${{ needs.tests_stored_results.outputs.result }}" | grep -q failed \
          && echo "failed=true" >> $GITHUB_OUTPUT \
          || echo 
      - name: Update status
        run: |
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.client_payload.sha }} \
          --header 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
          --header 'Content-Type: application/json' \
          --data '{
            "context": "e2e_tests",
            "state": "${{ (steps.summary-status-check.outputs.failed && 'failure') || 'success' }}",
            "description": "${{ (steps.summary-status-check.outputs.failed && 'failure') || 'success' }}",
            "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'
      
    # - name: debug
    #   env:
    #     PR_NUMBER_TEST: ${{ steps.pr-number-parse.outputs.pr_number }}
    #   run: |
    #     echo $PR_NUMBER_TEST
    # - name: Update comment on success
    #   if: ${{ steps.pr-number-parse.outputs.pr_number && success() }}
    #   uses: thollander/actions-comment-pull-request@v2
    #   with:
    #     comment_tag: e2e_tests_comment
    #     pr_number: ${{ steps.pr-number-parse.outputs.pr_number }}
    #     message: |
    #       Tests passed!
    # - name: Update comment on failure
    #   if: ${{ steps.pr-number-parse.outputs.pr_number && failure() }}
    #   uses: thollander/actions-comment-pull-request@v2
    #   with:
    #     comment_tag: e2e_tests_comment
    #     pr_number: ${{ steps.pr-number-parse.outputs.pr_number }}
    #     message: |
    #       Tests failed!
        